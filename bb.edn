{:deps {nrepl/nrepl {:mvn/version "1.0.0"}
        cider/cider-nrepl {:mvn/version "0.42.1"}
        org.babashka/cli {:mvn/version "0.7.53"}}

 :tasks
 {:requires ([babashka.fs :as fs]
             [babashka.nrepl.server :as srv]
             [babashka.process :as p])

  nrepl
  {:doc "Start nREPL server for MCP integration (in background)"
   :task (do
           (println "Starting nREPL server for MCP integration...")
           (fs/create-dirs "logs")
           (let [port (+ 40000 (rand-int 10000)) ; Random port in range 40000-50000
                 log-file (fs/file "logs" "nrepl.log")
                 proc (p/process {:out log-file
                                  :err log-file
                                  :shutdown p/destroy-tree}
                                 "bb" "-e"
                                 (pr-str (list 'do
                                               '(require '[babashka.nrepl.server :as srv])
                                               (list 'let ['server (list 'srv/start-server! {:host "localhost"
                                                                                             :port port})]
                                                     (list 'spit ".nrepl-port" (str port))
                                                     '(spit ".nrepl-pid" (str (.pid (java.lang.ProcessHandle/current))))
                                                     (list 'println (str "nREPL server started on port " port))
                                                     '(println "Port written to .nrepl-port file")
                                                     '(println "PID written to .nrepl-pid file")
                                                     '(deref (promise))))))]
             (Thread/sleep 1000) ; Give server time to start
             (if (fs/exists? ".nrepl-port")
               (do
                 (println (str "nREPL server started on port " port))
                 (println "Logs are being written to logs/nrepl.log"))
               (println "Failed to start nREPL server - check logs/nrepl.log"))))}

  dev:start
  {:doc "Start development environment"
   :task (do
           (println "Starting Crucible development environment...")
           (run 'nrepl))}

  dev:stop
  {:doc "Stop development environment"
   :task (do
           (println "Stopping Crucible development environment...")
           (if (fs/exists? ".nrepl-pid")
             (let [pid (slurp ".nrepl-pid")]
               (try
                 (p/destroy-tree {:pid (parse-long pid)})
                 (println "nREPL server stopped")
                 (catch Exception e
                   (println "Failed to stop nREPL server:" (.getMessage e))))
               (fs/delete ".nrepl-pid")
               (fs/delete-if-exists ".nrepl-port")
               (println "Cleaned up nREPL artifacts"))
             (println "No nREPL server running")))}

  clean
  {:doc "Clean REPL artifacts"
   :task (do
           (when (fs/exists? ".nrepl-port")
             (fs/delete ".nrepl-port")
             (println "Cleaned .nrepl-port"))
           (when (fs/exists? ".nrepl-pid")
             (fs/delete ".nrepl-pid")
             (println "Cleaned .nrepl-pid")))}

  ;; === CRUCIBLE USER-FACING COMMANDS ===

  crucible
  {:doc "Main Crucible CLI dispatcher"
   :task (load-file "core/bin/crucible.clj")}

  ;; Convenience aliases for common commands
  l
  {:doc "Open daily log (alias for: crucible log daily)"
   :task (shell "bb crucible log daily")}

  pipe
  {:doc "Pipe stdin to daily log (alias for: crucible pipe)"
   :task (apply shell "bb" "crucible" "pipe" *command-line-args*)}

  work-on
  {:doc "Start working on a ticket (alias for: crucible work-on <ticket>)"
   :task (if-let [ticket (first *command-line-args*)]
           (shell (str "bb crucible work-on " ticket))
           (println "Usage: bb work-on <ticket-id>"))}

  qs
  {:doc "Create a quick Jira story (alias for: crucible quick-story)"
   :task (if-let [summary (first *command-line-args*)]
           (shell "bb" "crucible" "qs" summary)
           (println "Usage: bb qs \"Story summary\""))}

  jira-check
  {:doc "Check Jira configuration and connectivity (alias for: crucible jira-check)"
   :task (apply shell "bb" "crucible" "jira-check" *command-line-args*)}}}